var searchIndex = new Map(JSON.parse('[\
["lox_tree_walk_interpreter",{"t":"CHCCCHCCHHHCCPPPGFGPFPPPPPPIFPGPPFPPNNNNNNNNNNNNNNONNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNOONNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOFPPGNNNNNNNNNNNNNNNNNNNNONNNNNNNNPFPGGPPPPNNNNNNNNNNNONNNNNNNNNNNNNNPFPPPINNOONNNNNNNNNNNNNNNNNNNNNFNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNFNNNNNNNNNNNNNNNNNNNNNNNFNNNNNOOONNNONNNNNNNPPPPPPPPPPPPPPPPPJPPPPGPPPPPGPPPPPPPPPPPPPPFGPPPNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNOOONNNNNNNNNONNNNNNNNNNNN","n":["ast","check","environment","error_reporter","interpreter","main","parser","pretty_printer","run","run_file","run_prompt","scanner","token","Assignment","Binary","Block","DeclKind","Declaration","ExprKind","ExprStmt","Expression","ForStmt","Grouping","IfStmt","Lit","Logical","PrintStmt","Program","Statement","Statement","StmtKind","Unary","Var","VarDecl","VarDecl","WhileStmt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column","column","column","column","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","identifier","initializer","into","into","into","into","into","into","into","kind","kind","kind","len","line","line","line","line","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","expression","identifier","identifier","left","left","logic_op","operator","operator","right","right","right","value","value","body","condition","condition","condition","declarations","do_stmt","else_stmt","expression","expression","initializer","then_stmt","update","Environment","Initialized","Uninitialized","VariableState","assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","define","fmt","fmt","from","from","get","increase_scope","into","into","new","reduce_scope","scopes","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CannotReduceGlobalScope","ErrorReporter","MissingToken","ParseError","RuntimeError","UnInitializedVariable","UndefinedVariable","UnexpectedEOF","UnexpectedToken","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","error","from","from","from","had_error","had_error","into","into","into","new","report","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Boolean","Interpreter","Nil","Number","String","Value","borrow","borrow_mut","environment_stack","error_reporter","evaluate_arithmetic","evaluate_assignment","evaluate_binary","evaluate_comparator","evaluate_declaration","evaluate_equals","evaluate_expression","evaluate_for_statement","evaluate_logical","evaluate_program","evaluate_statement","evaluate_unary","evaluate_var","evaluate_var_decl","from","into","is_truthy","new","try_from","try_into","type_id","Parser","binary_op","borrow","borrow_mut","check","comparison","consume","create_expression","equality","error_reporter","factor","from","into","logical","new","parse_assignment","parse_block","parse_declaration","parse_expression","parse_expression_statement","parse_for_statement","parse_if_statement","parse_print_statement","parse_program","parse_statement","parse_var_decl","parse_while_statement","primary","search","synchronize","term","token_iterator","try_from","try_into","type_id","unary","PrettyPrinter","borrow","borrow_mut","from","into","new","print_assignment","print_binary","print_block","print_declaration","print_expression","print_for_statement","print_grouping","print_if_stmt","print_literal","print_logical","print_program","print_statement","print_unary","print_var_decl","print_while_stmt","try_from","try_into","type_id","Scanner","add_single_character_token","add_token","advance","borrow","borrow_mut","chars","column","error_reporter","from","identifier","into","line","match_next","new","number","scan_tokens","try_from","try_into","type_id","And","Bang","BangEqual","Boolean","Class","Comma","Dot","Else","Equal","EqualEqual","False","For","Fun","Greater","GreaterEqual","Identifier","If","KEYWORDS","LeftBrace","LeftParen","Less","LessEqual","Literal","Minus","Nil","Nil","Number","Number","Operator","Operator","Or","Plus","Print","Return","RightBrace","RightParen","Semicolon","Slash","Star","String","String","Super","This","Token","TokenType","True","Var","While","_is_binary_op","_is_unary_op","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","column","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","lexeme","line","literal","new","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","token_type","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"lox_tree_walk_interpreter"],[13,"lox_tree_walk_interpreter::ast"],[128,"lox_tree_walk_interpreter::ast::ExprKind"],[141,"lox_tree_walk_interpreter::ast::StmtKind"],[153,"lox_tree_walk_interpreter::environment"],[186,"lox_tree_walk_interpreter::error_reporter"],[221,"lox_tree_walk_interpreter::interpreter"],[252,"lox_tree_walk_interpreter::parser"],[288,"lox_tree_walk_interpreter::pretty_printer"],[312,"lox_tree_walk_interpreter::scanner"],[332,"lox_tree_walk_interpreter::token"],[443,"alloc::string"],[444,"core::fmt"],[445,"core::result"],[446,"core::any"],[447,"core::option"],[448,"alloc::boxed"],[449,"alloc::vec"],[450,"core::ops::function"]],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,9,0,0,0,9,0,9,11,9,11,11,9,0,0,10,0,11,11,0,10,9,5,6,7,8,9,10,11,5,6,7,8,9,10,11,37,5,6,7,8,9,10,11,5,6,7,8,9,10,11,5,6,7,8,5,6,7,8,9,10,11,5,6,7,8,9,10,11,6,6,5,6,7,8,9,10,11,5,7,8,37,5,6,7,8,5,6,7,8,9,10,11,5,6,7,8,9,10,11,5,6,7,8,9,10,11,5,6,7,8,9,10,11,38,39,40,41,42,42,43,41,43,41,42,44,40,45,46,47,45,48,47,46,49,50,45,46,45,0,19,19,0,16,16,19,16,19,16,19,16,19,16,16,19,16,19,16,16,16,19,16,16,16,16,19,16,19,16,19,16,19,18,0,30,0,0,18,18,30,30,30,18,1,30,18,1,1,30,18,1,1,1,30,18,1,1,1,30,18,1,30,18,1,30,18,1,51,0,51,51,51,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,26,24,24,17,26,26,26,26,24,24,26,26,26,24,24,26,26,0,26,26,24,24,0,24,17,26,17,26,0,26,26,24,26,26,26,26,26,24,24,17,26,26,26,0,0,26,26,26,24,24,33,17,24,26,33,17,24,26,33,17,24,26,33,17,24,26,33,17,24,26,33,33,17,17,24,24,26,26,33,17,24,26,33,17,24,26,33,33,33,33,33,17,24,26,33,17,24,26,33,33,17,24,26,33,17,24,26,33,17,24,26],"f":"`{bd}```{{}d}``{fd}{hd}2`````````````````````````{ce{}{}}0000000000000`{jj}{ll}{nn}{A`A`}{AbAb}{AdAd}{AfAf}{{ce}d{}{}}000000````{{jAh}Aj}{{lAh}Aj}{{nAh}Aj}{{A`Ah}Aj}{{AbAh}Aj}{{AdAh}Aj}{{AfAh}Aj}{cc{}}000000``{ce{}{}}000000````````0000000{c{{Al{e}}}{}{}}0000000000000{cAn{}}000000`````````````````````````````{{B`hBb}{{Al{dBd}}}}3333{B`B`}{BfBf}>>{{B`f{Bh{Bb}}}d}{{B`Ah}Aj}{{BfAh}Aj}99{{B`h}{{Al{BbBd}}}}{B`d}::{{}B`}{B`{{Al{dBd}}}}`<<;;;;::`````````<<<<<<{{bBjBjh}d}>>>{bBl}`>>>{{}b}{{bBjBjhh}d}??????>>>``````{ce{}{}}0``{{BnBbC`BbBjBj}Bb}{{BnhA`}Bb}{{BnA`C`A`BjBj}Bb}2{{Bnj}d}{{BnBbC`Bb}Bb}{{BnA`}Bb}{{Bn{Bh{{Cb{j}}}}{Bh{{Cb{A`}}}}{Bh{{Cb{A`}}}}{Cb{n}}BjBj}d}{{BnA`CdA`}Bb}{{Bn{Cf{j}}}d}{{Bnn}d}{{BnC`A`BjBj}Bb}{{BnhBjBj}Bb}{{Bnl}d}{cc{}}>{{BnBb}Bl}{{}Bn}{c{{Al{e}}}{}{}}0{cAn{}}`{{ChA`{Cj{Cd}}c}{{Al{A`Cl}}}{{D`{Ch}{{Cn{{Al{A`Cl}}}}}}}}{ce{}{}}0{{ChCd}Bl}{Ch{{Al{A`Cl}}}}{{ChCdh}{{Al{DbCl}}}}{{ChAf}A`}2`2:42{{{Cj{Db}}}Ch}3{Ch{{Al{nCl}}}}{Ch{{Al{jCl}}}}51111{Ch{{Cf{j}}}}2{Ch{{Al{lCl}}}}37{{Ch{Cj{Cd}}}{{Bh{Cd}}}}{Ch{{Al{dCl}}}}9`>>=9`;;{cc{}}<{{}Dd}{{DdhA`}f}{{DdA`C`A`}f}{{Dd{Cj{j}}}f}{{Ddj}f}{{DdA`}f}{{Dd{Bh{{Cb{j}}}}{Bh{{Cb{A`}}}}{Bh{{Cb{A`}}}}n}f}1{{DdA`n{Bh{{Cb{n}}}}}f}{{DdBb}f}{{DdA`CdA`}f}{{Dd{Cf{j}}}f}{{Ddn}f}{{DdC`A`}f}{{Ddl}f}{{DdA`n}f}{c{{Al{e}}}{}{}}0{cAn{}}`{{DfCdDh}Db}{{DfCdf{Bh{Bb}}}Db}{Df{{Bh{Dh}}}}{ce{}{}}0```{cc{}}{{DfDh}Db}2`{{DfDh}Bl}{hDf}2{Df{{Cf{Db}}}}::9````````````````````````````````````````````````{C`Bl}066666666{DbDb}{BbBb}{C`C`}{CdCd}{{ce}d{}{}}000`{{BbBb}Bl}{{C`C`}Bl}{{CdCd}Bl}{{DbAh}Aj}0{{BbAh}Aj}0{{C`Ah}Aj}0{{CdAh}Aj}0{cc{}}000{ce{}{}}000```{{Cdf{Bh{Bb}}BjBj}Db}1111{cf{}}000`{c{{Al{e}}}{}{}}0000000{cAn{}}000","D":"Kl","p":[[5,"ErrorReporter",186],[1,"unit"],[5,"String",443],[1,"str"],[5,"Declaration",13],[5,"VarDecl",13],[5,"Statement",13],[5,"Expression",13],[6,"StmtKind",13],[6,"DeclKind",13],[6,"ExprKind",13],[5,"Formatter",444],[8,"Result",444],[6,"Result",445],[5,"TypeId",446],[5,"Environment",153],[6,"Literal",332],[6,"RuntimeError",186],[6,"VariableState",153],[6,"Option",447],[1,"usize"],[1,"bool"],[5,"Interpreter",221],[6,"Operator",332],[5,"Box",448],[6,"TokenType",332],[5,"Vec",449],[5,"Parser",252],[1,"slice"],[6,"ParseError",186],[17,"Output"],[10,"Fn",450],[5,"Token",332],[5,"PrettyPrinter",288],[5,"Scanner",312],[1,"char"],[8,"Program",13],[15,"Grouping",128],[15,"Var",128],[15,"Assignment",128],[15,"Binary",128],[15,"Logical",128],[15,"Unary",128],[15,"Lit",128],[15,"ForStmt",141],[15,"IfStmt",141],[15,"WhileStmt",141],[15,"Block",141],[15,"ExprStmt",141],[15,"PrintStmt",141],[8,"Value",221]],"r":[],"b":[[402,"impl-Debug-for-Token"],[403,"impl-Display-for-Token"],[404,"impl-Debug-for-Literal"],[405,"impl-Display-for-Literal"],[406,"impl-Display-for-Operator"],[407,"impl-Debug-for-Operator"],[408,"impl-Display-for-TokenType"],[409,"impl-Debug-for-TokenType"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAF0BJwADAAAADgAEABQAAAAWAC4ARgAGAFQAAQBdAAEAYAADAGUARACsAAEAsAALAL0AAAC/AAoA1QAJAOAAAgDkAAIA6AAFAO8AAwD0AAEA+gACAP8ABAAFAQIACgEAAAwBDQAbAQgAJgESADoBBwBDAQAARQEBAEgBAABKAREAXQEAAF8BAwBkAQQAawEMAHoBAgB/AQ8AkAEKAKcBFAA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
